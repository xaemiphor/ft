on:
  workflow_dispatch:
    inputs:
      exchange:
        description: 'Specify one or more specific exchanges to test. csv'
        required: false
        default: 'binanceus'
      strategy:
        description: 'Specify one or more specific strategies to test. csv'
        required: false
        default: 'Play1Strategy'
      timedata:
        description: 'Specify one or more timeranges to test. csv'
        required: false
        default: '202412'
      hyperoptloss:
        description: 'Hyperopt-loss argument'
        required: false
        default: ''
  push:
    branches:
      - main
    paths:
      - .github/workflows/hyperopt.yml
      - strategies/*

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  info:
    runs-on: ubuntu-24.04
    outputs:
      exchanges: "${{ steps.info.outputs.exchanges }}"
      strategies: "${{ steps.info.outputs.strategies }}"
      strategy_batch: "${{ steps.info.outputs.strategy_batch }}"
      timedata: "${{ steps.info.outputs.timedata }}"
    steps:
      - name: Git checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 1

      - id: info
        shell: bash
        run: |
          #exchanges=$(ls -1 backtest_config | awk -F '.' '!/^common/{print $1}' | sort | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          exchanges='["binanceus"]'
          strategies=$(awk -F '[ (]' '/\(IStrategy\):/{print $2}' strategies/*.py | sort | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          timedata=$(date -u +'%Y%m' -d '-1 month' | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          [ -n "${{ github.event.inputs.exchange }}" ] && exchanges=$(echo '${{ github.event.inputs.exchange }}' | tr ',' '\n' | sort | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          [ -n "${{ github.event.inputs.strategy }}" ] && strategies=$(echo '${{ github.event.inputs.strategy }}' | tr ',' '\n' | sort | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          [ -n "${{ github.event.inputs.timedata }}" ] && timedata=$(echo '${{ github.event.inputs.timedata }}' | tr ',' '\n' | sort | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          strategy_count=$(echo "${strategies}" | jq -c --raw-output '.|length')
          exchange_count=$(echo "${exchanges}" | jq -c --raw-output '.|length')
          timedata_count=$(echo "${timedata}" | jq -c --raw-output '.|length')
          max_batch_count=$(( 256 / (${exchange_count} * ${timedata_count}) ))
          strategy_batch_size=$(( (${strategy_count}+${max_batch_count}-1) / ${max_batch_count} ))
          strategy_batch=$(echo "${strategies}" | jq -c --raw-output --arg batch_size "${strategy_batch_size}" '_nwise($batch_size|tonumber)|tojson' | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          echo "exchanges=${exchanges}" | tee -a ${GITHUB_OUTPUT}
          echo "strategies=${strategies}" | tee -a ${GITHUB_OUTPUT}
          echo "strategy_batch=${strategy_batch}" | tee -a ${GITHUB_OUTPUT}
          echo "timedata=${timedata}" | tee -a ${GITHUB_OUTPUT}

  hyperopt:
    runs-on: ubuntu-24.04
    needs: info
    strategy:
      fail-fast: false
      matrix:
        exchange: ${{ fromJSON(needs.info.outputs.exchanges) }}
        strategy: ${{ fromJSON(needs.info.outputs.strategies) }}
        timedata: ${{ fromJSON(needs.info.outputs.timedata) }}
    steps:
      - name: Git checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          path: user_data

      - name: Git checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          ref: "data/${{ matrix.exchange }}/${{ matrix.timedata }}"
          path: user_data/data/${{ matrix.exchange }}

      - id: hyperopt
        shell: bash
        timeout-minutes: 15
        run: |
          echo "::group::Preload docker image"
          docker pull freqtradeorg/freqtrade:stable
          echo "::endgroup::"
          strategy_key=$(echo '${{ matrix.strategies }}${{ matrix.timedata }}' | md5sum | cut -d ' ' -f1)
          function freqtrade {
            docker run --entrypoint "/freqtrade/user_data/docker/entrypoint.sh" --rm -v "./user_data:/freqtrade/user_data" freqtradeorg/freqtrade:stable $@
            sudo chown -R $(id -u):$(id -g) ./user_data
          }
          echo "::group::Hyperopt"
          freqtrade hyperopt -s ${{ matrix.strategy }} --hyperopt-loss ${{ github.event.inputs.hyperoptloss || 'OnlyProfitHyperOptLoss' }} --starting-balance 1000 --timeframe 5m -c user_data/backtest_config/common.json -c user_data/backtest_config/${{ matrix.exchange }}.json --export signals --export-filename user_data/backtest_results/${{ matrix.exchange }}_${strategy_key}.json
          echo "::endgroup::"
          echo "results_json=$(jq -c --raw-output '.latest_backtest' ./user_data/backtest_results/.last_result.json)" | tee -a ${GITHUB_OUTPUT}
          echo "strategy_key=${strategy_key}" | tee -a ${GITHUB_OUTPUT}

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ github.run_number }}-${{ github.run_attempt }}-${{ matrix.exchange }}-${{ steps.backtest.outputs.strategy_key }}
          path: "${{ github.workspace }}/user_data/backtest_results/${{ steps.backtest.outputs.results_json }}"
          retention-days: 1

