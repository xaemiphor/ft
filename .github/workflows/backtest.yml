on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - .github/workflows/backtest.yml
      - strategies/*

concurrency:
  group: ${{ github.workflow }}
  cancel-in-progress: false

jobs:
  info:
    runs-on: ubuntu-latest
    outputs:
      exchanges: "${{ steps.info.outputs.exchanges }}"
      strategies: "${{ steps.info.outputs.strategies }}"
      lastmonth: "${{ steps.info.outputs.lastmonth }}"
    steps:
      - name: Git checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 1

      - id: info
        shell: bash
        run: |
          exchanges=$(ls -1 backtest_config | awk -F '.' '!/^common/{print $1}' | sort | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          strategies=$(awk -F '[ (]' '/\(IStrategy\):/{print $2}' strategies/* | sort | jq -c --raw-input -s '[split("\n")[]|select(length>0)]')
          echo "exchanges=${exchanges}" | tee -a ${GITHUB_OUTPUT}
          echo "strategies=${strategies}" | tee -a ${GITHUB_OUTPUT}
          echo "thismonth=$(date -u +'%Y%m')" | tee -a ${GITHUB_OUTPUT}
          echo "lastmonth=$(date -u +'%Y%m' -d '-1 month')" | tee -a ${GITHUB_OUTPUT}

  backtest:
    runs-on: ubuntu-latest
    needs: info
    strategy:
      fail-fast: false
      matrix:
        exchange: ${{ fromJSON(needs.info.outputs.exchanges) }}
        #strategy: ${{ fromJSON(needs.info.outputs.strategies) }}
    steps:
      - name: Git checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          path: user_data

      - name: Git checkout
        uses: actions/checkout@main
        with:
          fetch-depth: 1
          ref: "data/${{ matrix.exchange }}/${{ needs.info.outputs.lastmonth }}"
          path: user_data/data/${{ matrix.exchange }}

      - id: backtest
        shell: bash
        run: |
          function freqtrade {
            docker run --rm -v "./user_data:/freqtrade/user_data" freqtradeorg/freqtrade:stable $@
          }
          echo "::group::Backtest"
          #freqtrade backtesting --strategy ${{ matrix.strategy }} --starting-balance 10000 --timeframe 5m -c user_data/backtest_config/${{ matrix.exchange }}.json -c user_data/backtest_config/common.json --fee 0.012 --export signals
          STRATEGIES=( $(awk -F '[ (]' '/\(IStrategy\):/{print $2}' user_data/strategies/* | sort) )
          freqtrade backtesting --strategy-list ${STRATEGIES[@]} --starting-balance 10000 --timeframe 5m -c user_data/backtest_config/${{ matrix.exchange }}.json -c user_data/backtest_config/common.json --fee 0.012 --export signals
          echo "::endgroup::"
          echo "results_json=$(jq -c --raw-output '.latest_backtest' ./user_data/backtest_results/.last_result.json)" | tee -a ${GITHUB_OUTPUT}


      - uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const rawData = fs.readFileSync('./user_data/backtest_results/${{ steps.backtest.outputs.results_json }}', 'utf8');
            const jsonData = JSON.parse(rawData);
            function objectsToMarkdownTable(objects) {
              if (objects.length === 0) return '';

              const header = Object.keys(objects[0]).join(' | ');
              const separator = Object.keys(objects[0]).map(() => '---').join(' | ');
              const rows = objects.map(obj => Object.values(obj).join(' | '));

              return [header, separator, ...rows].join('\n');
            }
            const markdownTable = objectsToMarkdownTable(jsonData["strategy_comparison"]);
            core.summary.addRaw(markdownTable, true)
            core.summary.write()
